<TargetEndpoint name="summary-care-record-target">
  <FaultRules>
    <FaultRule name="access_token_expired">
      <Step>
        <Name>ExtractVariables.OAuthErrorFaultString</Name>
      </Step>
      <Step>
        <Name>AssignMessage.OAuthPolicyErrorResponse</Name>
      </Step>
      <Condition>oauthV2.OauthV2.VerifyAccessToken.failed</Condition>
    </FaultRule>
    <FaultRule name="user_role_shared_flow_error">
      <Condition>(sharedFlow.userRoleError is "true")</Condition>
      <Step>
          <Name>AssignMessage.Errors.UserRoleSharedFlow</Name>
      </Step>
      <Step>
          <Name>AssignMessage.CatchallErrorMessage</Name>
      </Step>
  </FaultRule>
  </FaultRules>
  <PreFlow>
    <Request>
      <Step>
        <Name>OauthV2.VerifyAccessToken</Name>
      </Step>
      <Step>
        <Name>FlowCallout.UserRoleService</Name>
    </Step>
      <Step>
        <Name>Quota</Name>
      </Step>
      <Step>
        <Name>SpikeArrest</Name>
      </Step>
      <Step>
        <Name>AssignMessage.AddUserIdHeader</Name>
      </Step>
      <Step>
        <Name>AssignMessage.AddIssuerHeader</Name>
      </Step>
      <Step>
        <Name>KeyValueMapOperations.GetSecureVariables</Name>
      </Step>
      <!-- If we require an ASID, fail if app.asid is null -->
      {% if REQUIRE_ASID == 'True' %}
      <Step>
        <Name>RaiseFault.400BadRequest</Name>
        <Condition>(app.asid is null)</Condition>
      </Step>
      {% endif %}

      <!-- Populate the ASID var from the app -->
      <Step>
        <Name>AssignMessage.PopulateAsidFromApp</Name>
        <Condition>(app.asid isNot null)</Condition>
      </Step>
      <Step>
        <!-- Populate the ASID var with the default ASID -->
        <Name>KeyValueMapOperations.GetDefaultAsid</Name>
        <Condition>(app.asid is null)</Condition>
      </Step>
      <Step>
        <!-- Add the ASID var as a header -->
        <Name>AssignMessage.AddAsidHeader</Name>
      </Step>
      <Step>
        <Name>AssignMessage.AddOriginalRequestIp</Name>
      </Step>
      <Step>
        <Name>AssignMessage.AddBaseUrl</Name>
      </Step>
    </Request>
  </PreFlow>
  <!--
    The {{ HOSTED_TARGET_CONNECTION }} resolved to this:
    For example:
    <HTTPTargetConnection>
      <SSLInfo>
        <Enabled>true</Enabled>
      </SSLInfo>
      <LoadBalancer>
        <Server name="summary-care-record-target" />
      </LoadBalancer>
    </HTTPTargetConnection>
  -->
  <HTTPTargetConnection>
    <Properties>
      <!-- Whitelist the 'expected' error code responses so the responses pass unhindered to caller
      Anything unexpected will be sanitsed by the DefaultFaultRule -
      https://docs.apigee.com/api-platform/fundamentals/fault-handling#customhandlingofhttperrorcodesfromthetargetserver -->
      <Property name="success.codes">1xx,2xx,3xx,4xx,504</Property>
    </Properties>
    {{ HOSTED_TARGET_CONNECTION }}
  </HTTPTargetConnection>
  <DefaultFaultRule>
    <Step>
      <Name>AssignMessage.CatchallErrorMessage</Name>
    </Step>
  </DefaultFaultRule>
</TargetEndpoint>
