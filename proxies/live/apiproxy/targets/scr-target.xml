<TargetEndpoint name="summary-care-record-target">
  <FaultRules>
    <FaultRule name="access_token_expired">
      <Step>
        <Name>ExtractVariables.OAuthErrorFaultString</Name>
      </Step>
      <Step>
        <Name>AssignMessage.OAuthPolicyErrorResponse</Name>
      </Step>
      <Condition>oauthV2.OauthV2.VerifyAccessToken.failed</Condition>
    </FaultRule>
  </FaultRules>
  <PreFlow>
    <Request>
<!--      <Step>-->
<!--        &lt;!&ndash; Header NHSD-Session-URID must be present and not empty &ndash;&gt;-->
<!--        <Name>RaiseFault.400BadRequest</Name>-->
<!--        <Condition>(request.header.NHSD-Session-URID is null) or (not request.header.NHSD-Session-URID ~~ ".+")</Condition>-->
<!--      </Step>-->
      <Step>
        <Name>OauthV2.VerifyAccessToken</Name>
      </Step>
      <Step>
        <Name>Quota</Name>
      </Step>
      <Step>
        <Name>SpikeArrest</Name>
      </Step>
      <Step>
        <Name>AssignMessage.AddUserIdHeader</Name>
      </Step>
      <Step>
        <Name>AssignMessage.AddIssuerHeader</Name>
      </Step>
      <Step>
        <Name>KeyValueMapOperations.GetSecureVariables</Name>
      </Step>
<!--      <Step>-->
<!--        <Name>AssignMessage.AddAsidHeader</Name>-->
<!--      </Step>-->
    </Request>
  </PreFlow>
  <!--
    To point to a named target server as this is how it SHOULD be implemented:
    For example:
    <HTTPTargetConnection>
      <SSLInfo>
        <Enabled>true</Enabled>
      </SSLInfo>
      <LoadBalancer>
        <Server name="summary-care-record-target" />
      </LoadBalancer>
    </HTTPTargetConnection>
  -->
  <HTTPTargetConnection>
    <Properties>
      <!-- Whitelist the 'expected' error code responses so the responses pass unhindered to caller
      Anything unexpected will be sanitsed by the DefaultFaultRule -
      https://docs.apigee.com/api-platform/fundamentals/fault-handling#customhandlingofhttperrorcodesfromthetargetserver -->
      <Property name="success.codes">1xx,2xx,3xx,4xx</Property>
    </Properties>
    <SSLInfo>
      <Enabled>true</Enabled>
    </SSLInfo>
    <URL>https://{{ APIM_PROXY_HOSTNAME }}</URL>
  </HTTPTargetConnection>
</TargetEndpoint>
